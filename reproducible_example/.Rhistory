#   zonder dat hierdoor exact voldaan wordt aan een bovengrens
# - ga net zo lang door totdat R * extra eenheden zijn toegevoegd
bovengrens  <- beschikbaar
K           <- length(bovengrens)
idxvast     <- which(beschikbaar == 0)     # integer(0)
aantalvast  <- length(idxvast)             # 0
idx0        <- which(start == 0)           # integer(0)
aantal0     <- length(idx0)                # 0
theta0      <- rep(0, 2*K - aantalvast - aantal0)
klaar       <- FALSE
toewijzen   <- runif(n = 1, min = Lextra, max = Uextra) * extra
FR          <- runif(n = 1, min = 0.2, max = 1)
perkeer     <- min(10, ceiling(toewijzen / (FR * (K - aantalvast))))
while (!klaar) {
#print(toewijzen)
if (aantalvast > 0) {
rest      <- bovengrens[-idxvast] - theta0[1:(K - aantalvast)]
} else {
rest      <- bovengrens - theta0[1:(K - aantalvast)]
}
idx       <- which(rest >= 1)
if (length(idx) >= 1) {
x         <- idx[sample.int(length(idx), 1)]
erbij     <- min(runif(n = 1, min = 0, max = min(perkeer, rest[x])), toewijzen)
theta0[x] <- theta0[x] + erbij
toewijzen <- toewijzen - erbij
}
klaar     <- (length(idx) == 0) | (toewijzen <= 0)
}
klaar       <- FALSE
toewijzen   <- runif(n = 1, min = Lweg, max = Uweg) * extra * nweg
FR          <- runif(n = 1, min = 0.2, max = 1)
perkeer     <- min(10, ceiling(toewijzen / (FR * (K - aantalvast))))
while (!klaar) {
#print(toewijzen)
if (aantal0 > 0) {
rest      <- start[-idx0] - theta0[-(1:(K - aantalvast))]
} else {
rest      <- start - theta0[-(1:(K - aantalvast))]
}
idx       <- which(rest >= 1)
if (length(idx) >= 1) {
x         <- idx[sample.int(length(idx), 1)]
eraf      <- min(runif(n = 1, min = 0, max = min(perkeer, rest[x])), toewijzen)
theta0[K - aantalvast + x] <- theta0[K - aantalvast + x] + eraf
toewijzen <- toewijzen - eraf
}
klaar     <- (length(idx) == 0) | (toewijzen <= 0)
}
# cellen die nog op hun oorspronkelijke startwaarden liggen iets ophogen (met veel minder dan 1)
idx00         <- which(theta0 == 0)
theta0[idx00] <- theta0[idx00] + 0.01
return(theta0)
}
### Function to calculate deviance
## Functie om G2 uit te rekenen binnen constrOptim (type 2)
berekenG2.type2 <- function(theta0, startaantallen, beschikbaar, rijtotalen, tab, cst) {
K                   <- length(startaantallen)
idxvast             <- which(beschikbaar == 0)
idx0                <- which(startaantallen == 0)
aantallen           <- startaantallen
if (length(idxvast) > 0) {
aantallen[-idxvast] <- aantallen[-idxvast] + theta0[1:(K - length(idxvast))]
} else {
aantallen           <- aantallen + theta0[1:K]
}
if (length(idx0) > 0) {
aantallen[-idx0]    <- aantallen[-idx0] - theta0[-(1:(K - length(idxvast)))]
} else {
aantallen           <- aantallen - theta0[-(1:K)]
}
aantallen           <- c(rijtotalen - aantallen, aantallen)
tab$Freq            <- pmax(0, round(aantallen, digits = 8))
ktot                <- aggregate(tab$Freq, by = tab[ , c('Y','Z')], FUN = sum)
idx                 <- which(tab$Freq != 0)
G2                  <- cst + 2 * sum(tab$Freq[idx] * log(tab$Freq[idx])) -
2 * sum(ktot$x * log(ktot$x))
return(G2)
}
### Function to calculate gradient
berekenG2.grad.type2 <- function(theta0, startaantallen, beschikbaar, rijtotalen, tab, cst) {
K                   <- length(startaantallen)
idxvast             <- which(beschikbaar == 0)
idx0                <- which(startaantallen == 0)
aantallen           <- startaantallen
if (length(idxvast) > 0) {
aantallen[-idxvast] <- aantallen[-idxvast] + theta0[1:(K - length(idxvast))]
} else {
aantallen           <- aantallen + theta0[1:K]
}
if (length(idx0) > 0) {
aantallen[-idx0]    <- aantallen[-idx0] - theta0[-(1:(K - length(idxvast)))]
} else {
aantallen           <- aantallen - theta0[-(1:(K - length(idxvast)))]
}
aantallen1          <- c(rijtotalen - aantallen, aantallen)
tab$Freq            <- pmax(0, round(aantallen1, digits = 8))
ktot                <- aggregate(tab$Freq, by = tab[ , c('Y','Z')], FUN = sum)
temp1               <- rep(ktot$x[ktot$Z == 2], each = length(unique(tab$X)))
temp2               <- rep(ktot$x[ktot$Z != 2], each = length(unique(tab$X)))
grad                <- 2 * (log(aantallen) - log(rijtotalen - aantallen)) -
2 * (log(temp1) - log(temp2))
return(c(grad[beschikbaar != 0], -grad[startaantallen != 0]))
}
df <- read.table("dataset.txt", header=TRUE)
# ------------------------------------------------------------------------------
# Determine number of cases available to be included in audit
df$Z     = as.factor(df$Z)
tab_available = df[which(df$Z=='2'),]
# prepare tab xy (RTOT)
tab_xy = aggregate(df[,"freq"], by = list(X = df$X, Y = df$Y),
FUN  = sum, drop = TRUE)
colnames(tab_xy) = c("X","Y","rtot")
# prepare tab yz (KTOT)
tab_yz = aggregate(df[,"freq"], by = list(Y = df$Y, Z = df$Z),
FUN  = sum, drop = TRUE)
colnames(tab_yz) = c("Y","Z","ktot")
# prepare tab y (TOT)
tab_y = aggregate(df[,"freq"], by = list(Y = df$Y),
FUN  = sum, drop = TRUE)
colnames(tab_y) = c("Y","tot")
# merge tabs
tab <- merge(x = df,  y = tab_xy, by = c('X', 'Y'), all.x = TRUE)
tab <- merge(x = tab, y = tab_yz, by = c('Y', 'Z'), all.x = TRUE)
tab <- merge(x = tab, y = tab_y,  by = 'Y',         all.x = TRUE)
tab <- tab[order(tab$X, tab$Y, tab$Z), ]
tab$Freq.pred <- tab$rtot * (tab$ktot / tab$tot)
# include number available for Z
tab <- merge(x = tab, y = tab_available[ , c('X', 'Y', 'freq')],
by = c('X', 'Y'),
all.x = TRUE)
tab <- tab[order(tab$Z, tab$Y, tab$X), ]
colnames(tab) <- c("X","Y","Z","freq","rtot","ktot","tot","freq.pred","freqZ")
# ------------------------------------------------------------------------------
# Compute constant term of deviance function
tot  <- aggregate(tab$freq, by = tab[, 'Y', drop = FALSE], FUN = sum)
rtot <- aggregate(tab$freq, by = tab[, c('X','Y')], FUN = sum)
cst  <- 2 * sum(tot$x * log(tot$x), na.rm = TRUE) - 2 * sum(rtot$x * log(rtot$x),
na.rm = TRUE)
# function for estimating a loglinear model
fitmodel <- function(model, tab) {
M      <- glm(formula = model, data = tab, family = poisson)
G2     <- M$deviance
Resdf  <- M$df.residual
fit    <- M$fitted.values
p      <- pchisq(G2, df = Resdf, lower.tail = FALSE)
return(list(G2 = G2, df = Resdf, p = p, fit = fit))
}
# deviance independence model
model_before <- fitmodel(model = 'freq ~ X*Y + Y*Z', tab = tab)
# ------------------------------------------------------------------------------
# Prepare restrictions for minimalization procedure
#extra, nweg, start, beschikbaar, typ
# Specify the number of additional cases you want to include in your audit sample
extra     <- c(300L)
# Specify the number of cases you allow to be excluded from  the initial audit sample as a
# fraction of the number you include
nweg      <- c(0.05L)
ex_nweg   <- expand.grid(extra=extra,nweg=nweg)
# Specify the number of iterations you allow the search algorithm to run
maxpoging <- 200L
conv             <- rep(NA_integer_, nrow(ex_nweg))
G2sol            <- rep(NA_real_, nrow(ex_nweg))
extra_toegewezen <- rep(NA_real_, nrow(ex_nweg))
extra_weggelaten <- rep(NA_real_, nrow(ex_nweg))
tab_extra        <- tab
start       <- tab$freq[tab$Z  == '1']
beschikbaar <- tab$freqZ[tab$Z == '1']
rijtotalen  <- tab$rtot[tab$Z  == '1']
# ------------------------------------------------------------------------------
### Function that prepares the restrictions for minimization
## Functie om restricties voor minimalisatie te maken
prepareerRestricties <- function(extra, nweg, start, beschikbaar, type) {
# type = 1: alleen (maximaal extra) eenheden toevoegen
# type = 2: (maximaal extra) eenheden toevoegen en (maximaal extra) eenheden weglaten
K <- length(beschikbaar)
## restricties (alleen ongelijkheden)
if (type == 1) { # alleen eenheden toevoegen
idxvast <- which(beschikbaar == 0)
aantalvast <- length(idxvast)
# ondergrens en bovengrens per cel (alleen als beschikbaar > 0)
A1 <- diag(K)[-idxvast, -idxvast]
b1 <- start[-idxvast]
A2 <- -diag(K)[-idxvast, -idxvast]
b2 <- -(start + beschikbaar)[-idxvast]
# bovengrens voor aantal extra bekeken
A3 <- matrix(-1, nrow = 1, ncol = K - aantalvast)
b3 <- -(sum(start[-idxvast]) + extra)
# samenvoegen
A <- rbind(A1, A2, A3)
b <- c(b1, b2, b3)
} else if (type == 2) { # eenheden toevoegen en weglaten
idxvast    <- which(beschikbaar == 0)
aantalvast <- length(idxvast)
idx0       <- which(start == 0)
aantal0    <- length(idx0)
# ondergrens en bovengrens toegevoegde waarden per cel (alleen als beschikbaar > 0)
if (aantalvast > 0) {
A1 <- cbind(diag(K)[-idxvast, -idxvast], matrix(0, nrow = K - aantalvast, ncol = K - aantal0))
b1 <- rep(0, K - aantalvast)
A2 <- cbind(-diag(K)[-idxvast, -idxvast], matrix(0, nrow = K - aantalvast, ncol = K - aantal0))
b2 <- -beschikbaar[-idxvast]
} else {
A1 <- cbind(diag(K), matrix(0, nrow = K - aantalvast, ncol = K - aantal0))
b1 <- rep(0, K - aantalvast)
A2 <- cbind(-diag(K), matrix(0, nrow = K - aantalvast, ncol = K - aantal0))
b2 <- -beschikbaar
}
# ondergrens en bovengrens weggelaten waarden per cel (alleen als start > 0)
if (aantal0 > 0) {
A3 <- cbind(matrix(0, nrow = K - aantal0, ncol = K - aantalvast), diag(K)[-idx0, -idx0])
b3 <- rep(0, K - aantal0)
A4 <- cbind(matrix(0, nrow = K - aantal0, ncol = K - aantalvast), -diag(K)[-idx0, -idx0])
b4 <- -start[-idx0]
} else {
A3 <- cbind(matrix(0, nrow = K - aantal0, ncol = K - aantalvast), diag(K))
b3 <- rep(0, K - aantal0)
A4 <- cbind(matrix(0, nrow = K - aantal0, ncol = K - aantalvast), -diag(K))
b4 <- -start
}
# bovengrens voor totaal aantal extra bekeken
A5 <- cbind(matrix(-1, nrow = 1, ncol = K - aantalvast), matrix(0, nrow = 1, ncol = K - aantal0))
b5 <- -extra
# bovengrens voor totaal aantal weggelaten
A6 <- cbind(matrix(0, nrow = 1, ncol = K - aantalvast), matrix(-1, nrow = 1, ncol = K - aantal0))
b6 <- -(extra*nweg)
# samenvoegen
A <- rbind(A1, A2, A3, A4, A5, A6)
b <- c(b1, b2, b3, b4, b5, b6)
}
return(list(A = A, b = b))
}
### Function to prepare starting values
prepareerStartwaarden.type2 <- function(extra, nweg, start, beschikbaar,
Lextra = 0.9, Uextra = 0.99, Lweg = 0.10, Uweg = 0.99) {
### Startoplossing bepalen
# Lastig: startoplossing voor constrOptim moet voldoen aan restricties
# en mag niet precies op een ondergrens of bovengrens liggen
# Aanpak:
# - trek R uit uniforme verdeling op (L, U) (aanname: U < 1)
# - trek FR uit uniforme verdeling op (0.2, 1)
# - definieer het aantal eenheden dat per keer wordt toegevoegd als FR * R * extra eenheden,
#   mits dit niet groter dan 10 is (anders 10)
# - trek per rij een willekeurig aantal (maximaal perkeer) eenheden om toe te voegen
#   zonder dat hierdoor exact voldaan wordt aan een bovengrens
# - ga net zo lang door totdat R * extra eenheden zijn toegevoegd
bovengrens  <- beschikbaar
K           <- length(bovengrens)
idxvast     <- which(beschikbaar == 0)     # integer(0)
aantalvast  <- length(idxvast)             # 0
idx0        <- which(start == 0)           # integer(0)
aantal0     <- length(idx0)                # 0
theta0      <- rep(0, 2*K - aantalvast - aantal0)
klaar       <- FALSE
toewijzen   <- runif(n = 1, min = Lextra, max = Uextra) * extra
FR          <- runif(n = 1, min = 0.2, max = 1)
perkeer     <- min(10, ceiling(toewijzen / (FR * (K - aantalvast))))
while (!klaar) {
#print(toewijzen)
if (aantalvast > 0) {
rest      <- bovengrens[-idxvast] - theta0[1:(K - aantalvast)]
} else {
rest      <- bovengrens - theta0[1:(K - aantalvast)]
}
idx       <- which(rest >= 1)
if (length(idx) >= 1) {
x         <- idx[sample.int(length(idx), 1)]
erbij     <- min(runif(n = 1, min = 0, max = min(perkeer, rest[x])), toewijzen)
theta0[x] <- theta0[x] + erbij
toewijzen <- toewijzen - erbij
}
klaar     <- (length(idx) == 0) | (toewijzen <= 0)
}
klaar       <- FALSE
toewijzen   <- runif(n = 1, min = Lweg, max = Uweg) * extra * nweg
FR          <- runif(n = 1, min = 0.2, max = 1)
perkeer     <- min(10, ceiling(toewijzen / (FR * (K - aantalvast))))
while (!klaar) {
#print(toewijzen)
if (aantal0 > 0) {
rest      <- start[-idx0] - theta0[-(1:(K - aantalvast))]
} else {
rest      <- start - theta0[-(1:(K - aantalvast))]
}
idx       <- which(rest >= 1)
if (length(idx) >= 1) {
x         <- idx[sample.int(length(idx), 1)]
eraf      <- min(runif(n = 1, min = 0, max = min(perkeer, rest[x])), toewijzen)
theta0[K - aantalvast + x] <- theta0[K - aantalvast + x] + eraf
toewijzen <- toewijzen - eraf
}
klaar     <- (length(idx) == 0) | (toewijzen <= 0)
}
# cellen die nog op hun oorspronkelijke startwaarden liggen iets ophogen (met veel minder dan 1)
idx00         <- which(theta0 == 0)
theta0[idx00] <- theta0[idx00] + 0.01
return(theta0)
}
### Function to calculate deviance
## Functie om G2 uit te rekenen binnen constrOptim (type 2)
berekenG2.type2 <- function(theta0, startaantallen, beschikbaar, rijtotalen, tab, cst) {
K                   <- length(startaantallen)
idxvast             <- which(beschikbaar == 0)
idx0                <- which(startaantallen == 0)
aantallen           <- startaantallen
if (length(idxvast) > 0) {
aantallen[-idxvast] <- aantallen[-idxvast] + theta0[1:(K - length(idxvast))]
} else {
aantallen           <- aantallen + theta0[1:K]
}
if (length(idx0) > 0) {
aantallen[-idx0]    <- aantallen[-idx0] - theta0[-(1:(K - length(idxvast)))]
} else {
aantallen           <- aantallen - theta0[-(1:K)]
}
aantallen           <- c(rijtotalen - aantallen, aantallen)
tab$Freq            <- pmax(0, round(aantallen, digits = 8))
ktot                <- aggregate(tab$Freq, by = tab[ , c('Y','Z')], FUN = sum)
idx                 <- which(tab$Freq != 0)
G2                  <- cst + 2 * sum(tab$Freq[idx] * log(tab$Freq[idx])) -
2 * sum(ktot$x * log(ktot$x))
return(G2)
}
### Function to calculate gradient
berekenG2.grad.type2 <- function(theta0, startaantallen, beschikbaar, rijtotalen, tab, cst) {
K                   <- length(startaantallen)
idxvast             <- which(beschikbaar == 0)
idx0                <- which(startaantallen == 0)
aantallen           <- startaantallen
if (length(idxvast) > 0) {
aantallen[-idxvast] <- aantallen[-idxvast] + theta0[1:(K - length(idxvast))]
} else {
aantallen           <- aantallen + theta0[1:K]
}
if (length(idx0) > 0) {
aantallen[-idx0]    <- aantallen[-idx0] - theta0[-(1:(K - length(idxvast)))]
} else {
aantallen           <- aantallen - theta0[-(1:(K - length(idxvast)))]
}
aantallen1          <- c(rijtotalen - aantallen, aantallen)
tab$Freq            <- pmax(0, round(aantallen1, digits = 8))
ktot                <- aggregate(tab$Freq, by = tab[ , c('Y','Z')], FUN = sum)
temp1               <- rep(ktot$x[ktot$Z == 2], each = length(unique(tab$X)))
temp2               <- rep(ktot$x[ktot$Z != 2], each = length(unique(tab$X)))
grad                <- 2 * (log(aantallen) - log(rijtotalen - aantallen)) -
2 * (log(temp1) - log(temp2))
return(c(grad[beschikbaar != 0], -grad[startaantallen != 0]))
}
# ------------------------------------------------------------------------------
set.seed(20200810 * 2)
for (s in 1:nrow(ex_nweg)) {
cat(sprintf('Bepaal optimale toewijzing van %d extra eenheden en %d weglaten\n',
ex_nweg[s,1], ex_nweg[s,1]*ex_nweg[s,2]))
flush.console()
prepAb <- prepareerRestricties(extra       = ex_nweg[s,1],
nweg        = ex_nweg[s,2],
start       = start,
beschikbaar = beschikbaar,
type        = 2)
beste <- Inf
for (poging in 1:maxpoging) {
cat(sprintf('---Poging %d van %d\n', poging, maxpoging))
flush.console()
theta0 <- prepareerStartwaarden.type2(extra       = ex_nweg[s,1],
nweg        = ex_nweg[s,2],
start       = start,
beschikbaar = beschikbaar,
Lextra      = 0.10,
Uextra      = 0.99,
Lweg        = 0.10,
Uweg        = 0.99)
oplossingP <- constrOptim(theta          = theta0,
f              = berekenG2.type2,
grad           = berekenG2.grad.type2,
ui             = prepAb$A,
ci             = prepAb$b,
control        = list(maxit = 1000, abstol = 1e-3),
startaantallen = start,
beschikbaar    = beschikbaar,
rijtotalen     = rijtotalen,
tab            = tab,
cst            = cst)
if (oplossingP$convergence == 0 & oplossingP$value < beste) {
oplossing <- oplossingP
beste <- oplossing$value
cat(sprintf('-----Betere oplossing gevonden met G^2 = %10.8f\n', beste))
flush.console()
} else if (poging == 1) {
oplossing <- oplossingP
}
}
}
## Resultaat
conv[s]  <- oplossing$convergence        # oplossing gevonden? (0 = ja)
G2sol[s] <- oplossing$value              # waarde doelfunctie in minimum
# Vertaal oplossing naar frequentietabel
Freqsol                         <- start
Freqsol[which(beschikbaar > 0)] <- Freqsol[which(beschikbaar > 0)] + oplossing$par[1:(sum(beschikbaar > 0))]
Freqsol[which(start > 0)]       <- Freqsol[which(start > 0)] - oplossing$par[-(1:(sum(beschikbaar > 0)))]
Freqsol                         <- c(Freqsol, rijtotalen - Freqsol)
extra_toegewezen[s]             <- sum(oplossing$par[1:(sum(beschikbaar > 0))])
extra_weggelaten[s]             <- sum(oplossing$par[-(1:(sum(beschikbaar > 0)))])
tab_extra[,"freqplus"] <- round(Freqsol, digits = 0)
tab_audit <- generate_W_for_audit(data, tab_extra)
# load functions
source("2a_function_generate_tabs.R")
source("2b_function_restrictions_minimalisation.R")
source("2c_function_prepare_startingvalues.R")
source("2d_function_calculate_deviance.R")
source("2e_function_calculate_gradient.R")
source("2f_function_loglinear_model.R")
# Input: aggregated data-set with variables X,Y,Z
# X: Target variable that is under inspection of audit
# Y: Background categories, audit sample will be selected that is representative with respect to Y
# Z: Indication in initial audit sample or not 0-1
data <- read.table("dataset.txt", header=TRUE)
# Generate frequencytabs from data
tab  <- preparetables(data)
# Compute constant term of deviance function
tot  <- aggregate(tab$freq, by = tab[ , 'Y', drop = FALSE], FUN = sum)
rtot <- aggregate(tab$freq, by = tab[ , c('X','Y')], FUN = sum)
cst  <- 2 * sum(tot$x * log(tot$x), na.rm=TRUE) - 2 * sum(rtot$x * log(rtot$x), na.rm=TRUE)
# deviance independence model
model_before <- fitmodel(model = 'freq ~ X*Y + Y*Z',
tab = tab)
# Prepare restrictions for minimalization procedure
#extra, nweg, start, beschikbaar, typ
# Specify the number of additional cases you want to include in your audit sample
extra     <- c(300L)
# Specify the number of cases you allow to be excluded from  the initial audit sample as a
# fraction of the number you include
nweg      <- c(0.05L)
ex_nweg   <- expand.grid(extra=extra,nweg=nweg)
# Specify the number of iterations you allow the search algorithm to run
maxpoging <- 200L
conv             <- rep(NA_integer_, nrow(ex_nweg))
G2sol            <- rep(NA_real_, nrow(ex_nweg))
extra_toegewezen <- rep(NA_real_, nrow(ex_nweg))
extra_weggelaten <- rep(NA_real_, nrow(ex_nweg))
tab_extra        <- tab
start       <- tab$freq[tab$Z  == '1']
beschikbaar <- tab$freqZ[tab$Z == '1']
rijtotalen  <- tab$rtot[tab$Z  == '1']
#seed = sum(i,j)
#set.seed(seed)
set.seed(20200810 * 2)
for (s in 1:nrow(ex_nweg)) {
cat(sprintf('Bepaal optimale toewijzing van %d extra eenheden en %d weglaten\n',
ex_nweg[s,1], ex_nweg[s,1]*ex_nweg[s,2]))
flush.console()
prepAb <- prepareerRestricties(extra       = ex_nweg[s,1],
nweg        = ex_nweg[s,2],
start       = start,
beschikbaar = beschikbaar,
type        = 2)
beste <- Inf
for (poging in 1:maxpoging) {
cat(sprintf('---Poging %d van %d\n', poging, maxpoging))
flush.console()
theta0 <- prepareerStartwaarden.type2(extra       = ex_nweg[s,1],
nweg        = ex_nweg[s,2],
start       = start,
beschikbaar = beschikbaar,
Lextra      = 0.10,
Uextra      = 0.99,
Lweg        = 0.10,
Uweg        = 0.99)
oplossingP <- constrOptim(theta          = theta0,
f              = berekenG2.type2,
grad           = berekenG2.grad.type2,
ui             = prepAb$A,
ci             = prepAb$b,
control        = list(maxit = 1000, abstol = 1e-3),
startaantallen = start,
beschikbaar    = beschikbaar,
rijtotalen     = rijtotalen,
tab            = tab,
cst            = cst)
if (oplossingP$convergence == 0 & oplossingP$value < beste) {
oplossing <- oplossingP
beste <- oplossing$value
cat(sprintf('-----Betere oplossing gevonden met G^2 = %10.8f\n', beste))
flush.console()
} else if (poging == 1) {
oplossing <- oplossingP
}
}
}
## Resultaat
conv[s]  <- oplossing$convergence        # oplossing gevonden? (0 = ja)
G2sol[s] <- oplossing$value              # waarde doelfunctie in minimum
# Vertaal oplossing naar frequentietabel
Freqsol                         <- start
Freqsol[which(beschikbaar > 0)] <- Freqsol[which(beschikbaar > 0)] + oplossing$par[1:(sum(beschikbaar > 0))]
Freqsol[which(start > 0)]       <- Freqsol[which(start > 0)] - oplossing$par[-(1:(sum(beschikbaar > 0)))]
Freqsol                         <- c(Freqsol, rijtotalen - Freqsol)
extra_toegewezen[s]             <- sum(oplossing$par[1:(sum(beschikbaar > 0))])
extra_weggelaten[s]             <- sum(oplossing$par[-(1:(sum(beschikbaar > 0)))])
tab_extra[,"freqplus"] <- round(Freqsol, digits = 0)
tab_audit <- generate_W_for_audit(data, tab_extra)
# deviance independence model
fitmodel <- function(model, tab) {
M <- glm(formula = model, data = tab, family = poisson)
G2 <- M$deviance
Resdf <- M$df.residual
fit <- M$fitted.values
p <- pchisq(G2, df = Resdf, lower.tail = FALSE)
return(list(G2 = G2, df = Resdf, p = p, fit = fit))
}
model_before <- fitmodel(model = 'freq ~ X*Y + Y*Z',
tab = tab)
model_before
